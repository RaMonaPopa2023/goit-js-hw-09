{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,kBACjCC,EAASF,SAASC,cAAc,iBAChCE,EAAWH,SAASC,cAAc,mBAmCxC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA3CQN,SAASC,cAAc,yBAE/BY,iBAAiB,SAASC,IACrCA,EAAMC,iBAEN,MAAMT,EAAQU,SAASjB,EAAQkB,OACzBC,EAAOF,SAASd,EAAOe,OACvBE,EAASH,SAASb,EAASc,OAE5BG,MAAMd,IAAWc,MAAMF,IAAUE,MAAMD,IAK9C,SAAwBA,EAAQE,EAAcH,GAC5C,IAAII,EAAQD,EAEZ,IAAK,IAAIE,EAAW,EAAGA,GAAYJ,EAAQI,IACzCnB,EAAcmB,EAAUD,GACrBE,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBtB,QAAiBC,MAAU,IAGnDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBmB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoBxB,QAAeC,MAAU,IAInDgB,GAASJ,C,CApBTY,CAAeX,EAAQb,EAAOY,EAAK","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\nconst submitButton = document.querySelector('button[type=\"submit\"]');\n\nsubmitButton.addEventListener('click', event => {\n  event.preventDefault();\n\n  const delay = parseInt(delayEl.value);\n  const step = parseInt(stepEl.value);\n  const amount = parseInt(amountEl.value);\n\n  if (!isNaN(delay) && !isNaN(step) && !isNaN(amount)) {\n    createPromises(amount, delay, step);\n  }\n});\n\nfunction createPromises(amount, initialDelay, step) {\n  let delay = initialDelay;\n\n  for (let position = 1; position <= amount; position++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$delayEl","document","querySelector","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","parseInt","value","step","amount","isNaN","initialDelay","delay1","position1","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$createPromises"],"version":3,"file":"03-promises.2cb36772.js.map"}