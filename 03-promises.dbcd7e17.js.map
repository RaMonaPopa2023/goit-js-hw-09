{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,kBACjCC,EAASF,SAASC,cAAc,iBAChCE,EAAWH,SAASC,cAAc,mBAmCxC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA3CcN,SAASC,cAAc,yBAE/BY,iBAAiB,SAAS,SAAAC,GACrCA,EAAMC,iBAEN,IAAMT,EAAQU,SAASjB,EAAQkB,OACzBC,EAAOF,SAASd,EAAOe,OACvBE,EAASH,SAASb,EAASc,OAE5BG,MAAMd,IAAWc,MAAMF,IAAUE,MAAMD,IAK9C,SAAwBA,EAAQE,EAAcH,GAG5C,IAFA,IAAII,EAAQD,EAEHE,EAAW,EAAGA,GAAYJ,EAAQI,IACzCnB,EAAcmB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAIjDgB,GAASJ,C,CApBTc,CAAeb,EAAQb,EAAOY,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\nconst submitButton = document.querySelector('button[type=\"submit\"]');\n\nsubmitButton.addEventListener('click', event => {\n  event.preventDefault();\n\n  const delay = parseInt(delayEl.value);\n  const step = parseInt(stepEl.value);\n  const amount = parseInt(amountEl.value);\n\n  if (!isNaN(delay) && !isNaN(step) && !isNaN(amount)) {\n    createPromises(amount, delay, step);\n  }\n});\n\nfunction createPromises(amount, initialDelay, step) {\n  let delay = initialDelay;\n\n  for (let position = 1; position <= amount; position++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delayEl","document","querySelector","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","parseInt","value","step","amount","isNaN","initialDelay","delay1","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.dbcd7e17.js.map"}